/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:48:45 GMT 2023
 */

package evosuite_test.nodi;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.BodyOp;
import compiler.nodi.FunOp;
import compiler.nodi.ParDeclOp;
import compiler.nodi.ProgramOp;
import compiler.nodi.VarDeclOp;
import compiler.nodi.expr.Expr;
import compiler.nodi.expr.IdInitOp;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.Statement;
import compiler.symbolTable.SymbolTable;
import compiler.visitors.Visitor;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;

public class ProgramOp_ESTest  {

  @Test
  public void test00()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+(k", bodyOp0);
      FunOp funOp1 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      programOp0.addFunOp(funOp0);
      ProgramOp programOp1 = new ProgramOp(arrayList1, funOp1, arrayList2);
      assertFalse(programOp1.equals((Object)programOp0));
  }

  @Test
  public void test01()  throws Throwable  {
      Identifier identifier0 = new Identifier((String) null);
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(funOp0, arrayList2);
      List<VarDeclOp> list0 = programOp0.getVarDeclList();
      assertNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      ArrayList<Expr> arrayList3 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("", arrayList3);
      arrayList1.add(varDeclOp0);
      List<VarDeclOp> list0 = programOp0.getVarDeclList();
      assertTrue(list0.contains(varDeclOp0));
  }

  @Test
  public void test03()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      programOp0.addFunOp(funOp0);
      programOp0.getFunOpList();
      assertTrue(arrayList2.contains(funOp0));
      assertEquals(0, arrayList1.size());
  }


  @Test
  public void test04()  throws Throwable  {
      ArrayList<FunOp> arrayList0 = new ArrayList<FunOp>();
      Identifier identifier0 = new Identifier("F");
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, arrayList1);
      FunOp funOp0 = new FunOp(identifier0, "F", bodyOp0);
      ProgramOp programOp0 = new ProgramOp(funOp0, arrayList0);
      // Undeclared exception!
      try { 
        programOp0.addsVarDec((List<VarDeclOp>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }

  @Test
  public void test05()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      ArrayList<Statement> arrayList2 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList2);
      FunOp funOp0 = new FunOp(identifier0, arrayList1, "p]>]+0GBK", bodyOp0);
      ArrayList<FunOp> arrayList3 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(funOp0, arrayList3);
      // Undeclared exception!
      try { 
        programOp0.addsFunOp((List<FunOp>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      // Undeclared exception!
      try { 
        programOp0.addVarDec((VarDeclOp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      Identifier identifier0 = new Identifier("");
      FunOp funOp0 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList2);
      // Undeclared exception!
      try { 
        programOp0.addFunOp((FunOp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LinkedList<VarDeclOp> linkedList0 = new LinkedList<VarDeclOp>();
      ArrayList<FunOp> arrayList0 = new ArrayList<FunOp>();
      arrayList0.add((FunOp) null);
      ProgramOp programOp0 = null;
      try {
        programOp0 = new ProgramOp(linkedList0, (FunOp) null, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      LinkedList<VarDeclOp> linkedList0 = new LinkedList<VarDeclOp>();
      LinkedList<FunOp> linkedList1 = new LinkedList<FunOp>();
      ProgramOp programOp0 = null;
      try {
        programOp0 = new ProgramOp(linkedList0, funOp0, linkedList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<FunOp> linkedList0 = new LinkedList<FunOp>();
      linkedList0.add((FunOp) null);
      ProgramOp programOp0 = null;
      try {
        programOp0 = new ProgramOp((FunOp) null, linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      LinkedList<FunOp> linkedList0 = new LinkedList<FunOp>();
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ProgramOp programOp0 = null;
      try {
        programOp0 = new ProgramOp(funOp0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      programOp0.addFunOp(funOp0);
      // Undeclared exception!
      try { 
        programOp0.addsFunOp(arrayList2);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.ArrayList$Itr"));
      }
  }


  @Test
  public void test13()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      LinkedList<FunOp> linkedList0 = new LinkedList<FunOp>();
      programOp0.addsFunOp(linkedList0);
      assertEquals(0, linkedList0.size());
  }


  @Test
  public void test14()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      FunOp funOp0 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<Expr> arrayList2 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("b}p+qvBq;TM9s$", arrayList2);
      arrayList0.add(varDeclOp0);
      ArrayList<FunOp> arrayList3 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList3);
      // Undeclared exception!
      try { 
        programOp0.addsVarDec(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.ArrayList$Itr"));
      }
  }


  @Test
  public void test15()  throws Throwable  {
      Identifier identifier0 = new Identifier((String) null);
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      programOp0.addsVarDec(arrayList1);
      assertEquals(0, arrayList1.size());
  }


  @Test
  public void test16()  throws Throwable  {
      Identifier identifier0 = new Identifier((String) null);
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(funOp0, arrayList2);
      programOp0.addFunOp(funOp0);
      ProgramOp programOp1 = null;
      try {
        programOp1 = new ProgramOp((FunOp) null, arrayList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }

  @Test
  public void test17()  throws Throwable  {
      LinkedList<VarDeclOp> linkedList0 = new LinkedList<VarDeclOp>();
      LinkedList<FunOp> linkedList1 = new LinkedList<FunOp>();
      ArrayList<FunOp> arrayList0 = new ArrayList<FunOp>(linkedList1);
      ArrayList<Expr> arrayList1 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("", arrayList1);
      linkedList0.add(varDeclOp0);
      ProgramOp programOp0 = null;
      try {
        programOp0 = new ProgramOp(linkedList0, (FunOp) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }



  @Test
  public void test18()  throws Throwable  {
      ArrayList<FunOp> arrayList0 = new ArrayList<FunOp>();
      Identifier identifier0 = new Identifier("compiler.symbolTable.RowTable");
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, (List<Statement>) null);
      FunOp funOp0 = new FunOp(identifier0, "compiler.symbolTable.RowTable", bodyOp0);
      ProgramOp programOp0 = new ProgramOp(funOp0, arrayList0);
      List<FunOp> list0 = programOp0.getFunOpList();
      assertFalse(list0.contains(funOp0));
  }

  @Test
  public void test19()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      FunOp funOp0 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList2);
      SymbolTable symbolTable0 = programOp0.getSymbolTable();
      assertNull(symbolTable0);
  }

  @Test
  public void test20()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      FunOp funOp0 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList2);
      String string0 = programOp0.toString();
      assertEquals("ProgramOp", string0);
  }


  @Test
  public void test21()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      FunOp funOp0 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList2);
      try { 
        programOp0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ProgramOp"));
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      ArrayList<Statement> arrayList2 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList2);
      FunOp funOp0 = new FunOp(identifier0, arrayList1, (String) null, bodyOp0);
      ArrayList<FunOp> arrayList3 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList3);
      ArrayList<IdInitOp> arrayList4 = new ArrayList<IdInitOp>();
      ArrayList<Expr> arrayList5 = new ArrayList<Expr>(arrayList4);
      VarDeclOp varDeclOp0 = new VarDeclOp("", arrayList5);
      programOp0.addVarDec(varDeclOp0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      ArrayList<FunOp> arrayList0 = new ArrayList<FunOp>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("Ez;y#Hz");
      ArrayList<Statement> arrayList2 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList2);
      FunOp funOp0 = new FunOp(identifier0, "Ez;y#Hz", bodyOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList0);
      List<VarDeclOp> list0 = programOp0.getVarDeclList();
      assertEquals(0, list0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      Identifier identifier0 = new Identifier("$nII?K+x)(k");
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      FunOp funOp0 = new FunOp(identifier0, "$nII?K+x)(k", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, funOp0, arrayList2);
      FunOp funOp1 = programOp0.getMain();
      assertEquals("$nII?K+x)(k", funOp1.getType());
  }

  @Test
  public void test25()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      Identifier identifier0 = new Identifier("");
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      FunOp funOp0 = new FunOp(identifier0, "", bodyOp0);
      ArrayList<FunOp> arrayList2 = new ArrayList<FunOp>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, funOp0, arrayList2);
      programOp0.setSymbolTable((SymbolTable) null);
  }
}

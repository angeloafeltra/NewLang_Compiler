/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:52:23 GMT 2023
 */

package evosuite_test.nodi;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.BodyOp;
import compiler.nodi.VarDeclOp;
import compiler.nodi.expr.Expr;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.CallFunOpStat;
import compiler.nodi.statement.ReadOp;
import compiler.nodi.statement.Statement;
import compiler.visitors.TranslatorVisitor;
import compiler.visitors.Visitor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.junit.runner.RunWith;


public class BodyOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, arrayList0);
      List<VarDeclOp> list0 = bodyOp0.getListVar();
      assertNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      ArrayList<Expr> arrayList2 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("FunOp", arrayList2);
      arrayList0.add(varDeclOp0);
      List<VarDeclOp> list0 = bodyOp0.getListVar();
      assertTrue(list0.contains(varDeclOp0));
  }

  @Test
  public void test02()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, (List<Statement>) null);
      List<Statement> list0 = bodyOp0.getListStatement();
      assertNull(list0);
  }

  @Test
  public void test03()  throws Throwable  {
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      Identifier identifier0 = new Identifier("C");
      CallFunOpStat callFunOpStat0 = new CallFunOpStat(identifier0);
      arrayList0.add((Statement) callFunOpStat0);
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, arrayList0);
      List<Statement> list0 = bodyOp0.getListStatement();
      assertFalse(list0.isEmpty());
  }


  @Test
  public void test04()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, arrayList1);
      // Undeclared exception!
      try { 
        bodyOp0.addsListVar(arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.BodyOp"));
      }
  }

  @Test
  public void test05()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      // Undeclared exception!
      try { 
        bodyOp0.addStatements((List<Statement>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.BodyOp"));
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      // Undeclared exception!
      try { 
        bodyOp0.addStatement((Statement) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      LinkedList<Statement> linkedList0 = new LinkedList<Statement>();
      BodyOp bodyOp0 = null;
      try {
        bodyOp0 = new BodyOp(arrayList0, linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.BodyOp"));
      }
  }


  @Test
  public void test09()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      List<VarDeclOp> list0 = bodyOp0.getListVar();
      assertEquals(0, list0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      List<Statement> list0 = bodyOp0.getListStatement();
      assertEquals(0, list0.size());
  }


  @Test
  public void test11()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      arrayList1.add((Statement) null);
      // Undeclared exception!
      try { 
        bodyOp0.addStatements(arrayList1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }



  @Test
  public void test12()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      bodyOp0.addStatements(arrayList1);
      assertEquals(0, arrayList1.size());
  }

  @Test
  public void test13()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      ArrayList<Expr> arrayList2 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("FunOp", arrayList2);
      arrayList0.add(varDeclOp0);
      bodyOp0.addsListVar(arrayList0);
      assertEquals(2, arrayList0.size());
  }


  @Test
  public void test14()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, (List<Statement>) null);
      try { 
        bodyOp0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.BodyOp"));
      }
  }

  @Test
  public void test15()  throws Throwable  {
      LinkedList<VarDeclOp> linkedList0 = new LinkedList<VarDeclOp>();
      linkedList0.add((VarDeclOp) null);
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      BodyOp bodyOp0 = null;
      try {
        bodyOp0 = new BodyOp(linkedList0, arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }



  @Test
  public void test16()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      ArrayList<Identifier> arrayList2 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList2);
      bodyOp0.addStatement(readOp0);
      assertFalse(arrayList1.isEmpty());
      assertTrue(arrayList0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      ArrayList<Statement> arrayList0 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, arrayList0);
      String string0 = bodyOp0.toString();
      assertEquals("BodyOp", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      ArrayList<Expr> arrayList2 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("", arrayList2);
      bodyOp0.addVar(varDeclOp0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
  }

  @Test
  public void test19()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<Statement> arrayList1 = new ArrayList<Statement>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      Object object0 = bodyOp0.accept(translatorVisitor0);
      assertNull(object0);
  }
}

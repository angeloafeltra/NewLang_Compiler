/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:49:56 GMT 2023
 */

package evosuite_test.nodi.expr;


import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.expr.ConstOp;
import compiler.visitors.TranslatorVisitor;

public class ConstOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("", "");
      constOp0.setUserObject("");
      String string0 = constOp0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      ConstOp constOp0 = new ConstOp((String) null, (String) null);
      String string0 = constOp0.getTypeConst();
      assertNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("", "");
      String string0 = constOp0.getTypeConst();
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("n}N&n<306Q=O", "n}N&n<306Q=O");
      constOp0.setTipoEspressione("integer");
      String string0 = constOp0.getTipoEspressione();
      assertEquals("integer", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("A^KN~Ai)5rNUQ", "A^KN~Ai)5rNUQ");
      String string0 = constOp0.getLessema();
      assertEquals("A^KN~Ai)5rNUQ", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("", "");
      String string0 = constOp0.getLessema();
      assertEquals("", string0);
  }


  @Test
  public void test06()  throws Throwable  {
      ConstOp constOp0 = new ConstOp((String) null, (String) null);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        constOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         String stacktrace = ExceptionUtils.getStackTrace(e);
         assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("A^KN~Ai)5rNUQ", "A^KN~Ai)5rNUQ");
      String string0 = constOp0.getTypeConst();
      assertEquals("A^KN~Ai)5rNUQ", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("", "");
      String string0 = constOp0.toString();
      assertEquals(": ", string0);
  }

  @Test
  public void test09()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("A^KN~Ai)5rNUQ", "A^KN~Ai)5rNUQ");
      constOp0.setTipoEspressione("");
      String string0 = constOp0.getTipoEspressione();
      assertEquals("", string0);
  }

  @Test
  public void test10()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("PowOp", "PowOp");
      String string0 = constOp0.getTipoEspressione();
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      ConstOp constOp0 = new ConstOp((String) null, (String) null);
      String string0 = constOp0.getLessema();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("", "");
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("");
      Object object0 = constOp0.accept(translatorVisitor0);
      assertEquals("", object0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:53:33 GMT 2023
 */

package evosuite_test.nodi.expr;

import compiler.nodi.expr.*;
import compiler.visitors.Visitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import compiler.visitors.TranslatorVisitor;

public class Expr_ESTest {

  @Test
  public void test00()  throws Throwable  {
      Expr expr0 = new Expr("");
      UnaryOp unaryOp0 = new UnaryOp("", expr0);
      String string0 = unaryOp0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Expr expr0 = new Expr("");
      expr0.setTipoEspressione(".:T");
      String string0 = expr0.getTipoEspressione();
      assertEquals(".:T", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("HIZ69`sx,`", "");
      constOp0.setTipoEspressione("");
      String string0 = constOp0.getTipoEspressione();
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Expr expr0 = new Expr((String) null);
      expr0.setMode("main2");
      String string0 = expr0.getMode();
      assertEquals("main2", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      Expr expr0 = new Expr("");
      UnaryOp unaryOp0 = new UnaryOp("", expr0);
      unaryOp0.setMode("");
      String string0 = unaryOp0.getMode();
      assertEquals("", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("HIZ69`sx,`", "");
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("");
      Object object0 = constOp0.accept(translatorVisitor0);
      assertEquals("", object0);
  }


  @Test
  public void test06()  throws Throwable  {
      Identifier identifier0 = new Identifier("OT>bs:tiUGAlTW");
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("OT>bs:tiUGAlTW");
      try { 
        idInitObbOp0.accept(translatorVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // compiler.nodi.expr.Identifier cannot be cast to compiler.nodi.expr.ConstOp
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }



  @Test
  public void test07()  throws Throwable  {
      Expr expr0 = new Expr("");
      UnaryOp unaryOp0 = new UnaryOp("", expr0);
      String string0 = unaryOp0.getMode();
      assertNull(string0);
  }

  @Test
  public void test08()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("HIZ69`sx,`", "");
      String string0 = constOp0.toString();
      assertEquals("HIZ69`sx,`: ", string0);
  }


  @Test
  public void test09()  throws Throwable  {
      Expr expr0 = new Expr("compiler.symbolTable.TypeField$1");
      try { 
        expr0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         String stacktrace = ExceptionUtils.getStackTrace(e);
         assertTrue(stacktrace.contains("compiler.nodi.expr.Expr"));
      }
  }



  @Test
  public void test10()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("HIZ69`sx,`", "");
      String string0 = constOp0.getTipoEspressione();
      assertNull(string0);
  }
}

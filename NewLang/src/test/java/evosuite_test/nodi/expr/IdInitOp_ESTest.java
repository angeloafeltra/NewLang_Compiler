/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:43:55 GMT 2023
 */

package evosuite_test.nodi.expr;

import compiler.nodi.expr.*;
import compiler.visitors.Visitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;


import compiler.visitors.TranslatorVisitor;

public class IdInitOp_ESTest  {

  @Test
  public void test0()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      IdInitOp idInitOp0 = new IdInitOp(identifier0, callFunOpExpr0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      Object object0 = idInitOp0.accept(translatorVisitor0);
      assertEquals("=()", object0);
  }


  @Test
  public void test1()  throws Throwable  {
      Identifier identifier0 = new Identifier("=g.#px_)t</O+n");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      try { 
        idInitOp0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.expr.IdInitOp"));
      }
  }

  @Test
  public void test2()  throws Throwable  {
      IdInitOp idInitOp0 = null;
      try {
        idInitOp0 = new IdInitOp((Identifier) null, (Expr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }


  @Test
  public void test3()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      Expr expr0 = idInitOp0.getExpr();
      assertNull(expr0.getMode());
  }

  @Test
  public void test4()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      Identifier identifier1 = idInitOp0.getId();
      assertNull(identifier1.getTipoEspressione());
  }

  @Test
  public void test5()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      String string0 = idInitOp0.toString();
      assertEquals("IdInitOp", string0);
  }


  @Test
  public void test6()  throws Throwable  {
      Identifier identifier0 = new Identifier((String) null);
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      IdInitOp idInitOp0 = new IdInitOp(identifier0, idInitObbOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        idInitOp0.accept(translatorVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // compiler.nodi.expr.Identifier cannot be cast to compiler.nodi.expr.ConstOp
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }


}

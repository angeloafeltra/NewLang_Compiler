/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 19:15:01 GMT 2023
 */

package evosuite_test.nodi.expr;

import compiler.nodi.expr.*;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import compiler.nodi.statement.CallFunOpStat;
import compiler.visitors.TranslatorVisitor;

public class AritAndRelOp_ESTest  {

  @Test
  public void test00()  throws Throwable  {
      Identifier identifier0 = new Identifier("z]");
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", identifier0, identifier0);
      String string0 = aritAndRelOp0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp((String) null, idInitOp0, identifier0);
      String string0 = aritAndRelOp0.getTypeOp();
      assertNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      Identifier identifier0 = new Identifier("z]");
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", identifier0, identifier0);
      String string0 = aritAndRelOp0.getTypeOp();
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, callFunOpExpr0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", idInitObbOp0, callFunOpExpr0);
      aritAndRelOp0.setTipoEspressione("");
      String string0 = aritAndRelOp0.getTipoEspressione();
      assertEquals("", string0);
  }


  @Test
  public void test04()  throws Throwable  {
      ConstOp constOp0 = new ConstOp((String) null, (String) null);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp((String) null, constOp0, constOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        aritAndRelOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Identifier identifier0 = new Identifier((String) null);
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", identifier0, idInitObbOp0);
      AritAndRelOp aritAndRelOp1 = null;
      try {
        aritAndRelOp1 = new AritAndRelOp("'", (Expr) null, aritAndRelOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
         String stacktrace = ExceptionUtils.getStackTrace(e);
         assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Identifier identifier0 = new Identifier("s");
      UnaryOp unaryOp0 = new UnaryOp("~Tm$OaH9", identifier0);
      CallFunOpStat callFunOpStat0 = new CallFunOpStat(identifier0);
      unaryOp0.setParent(callFunOpStat0);
      AritAndRelOp aritAndRelOp0 = null;
      try {
        aritAndRelOp0 = new AritAndRelOp("", unaryOp0, identifier0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Identifier identifier0 = new Identifier("0");
      UnaryOp unaryOp0 = new UnaryOp("1W", identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("1W", unaryOp0, identifier0);
      String string0 = aritAndRelOp0.toString();
      assertEquals("1W", string0);
  }

  @Test
  public void test08()  throws Throwable  {
      Identifier identifier0 = new Identifier("0");
      UnaryOp unaryOp0 = new UnaryOp("1W", identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("1W", unaryOp0, identifier0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      Object object0 = aritAndRelOp0.accept(translatorVisitor0);
      assertEquals("", object0);
  }

  @Test
  public void test09()  throws Throwable  {
      Identifier identifier0 = new Identifier("0");
      UnaryOp unaryOp0 = new UnaryOp("1W", identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("1W", unaryOp0, identifier0);
      String string0 = aritAndRelOp0.getTipoEspressione();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      Identifier identifier0 = new Identifier("0");
      UnaryOp unaryOp0 = new UnaryOp("1W", identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("1W", unaryOp0, identifier0);
      Identifier identifier1 = (Identifier)aritAndRelOp0.getExpr2();
      assertEquals("0", identifier1.getLessema());
  }

  @Test
  public void test11()  throws Throwable  {
      Expr expr0 = new Expr("");
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", expr0, expr0);
      Expr expr1 = aritAndRelOp0.getExpr1();
      assertSame(expr1, expr0);
  }

  @Test
  public void test12()  throws Throwable  {
      ConstOp constOp0 = new ConstOp("&Z8", "&Z8");
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("&Z8", constOp0, constOp0);
      String string0 = aritAndRelOp0.getTypeOp();
      assertEquals("&Z8", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Identifier identifier0 = new Identifier((String) null);
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", identifier0, idInitObbOp0);
      aritAndRelOp0.setTipoEspressione("]");
      String string0 = aritAndRelOp0.getTipoEspressione();
      assertEquals("]", string0);
  }
}

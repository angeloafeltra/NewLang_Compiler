/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 19:16:14 GMT 2023
 */

package evosuite_test.nodi;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.ParDeclOp;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.CallFunOpStat;
import compiler.visitors.TranslatorVisitor;
import compiler.visitors.Visitor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;

public class ParDeclOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("1H9)Ha", "1H9)Ha", arrayList0);
      parDeclOp0.setUserObject((Object) null);
      String string0 = parDeclOp0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("(?23]_\u0005`KHyL;", (String) null, arrayList0);
      String string0 = parDeclOp0.getTypeStream();
      assertEquals("(?23]_\u0005`KHyL;", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("", (String) null, arrayList0);
      String string0 = parDeclOp0.getTypeStream();
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("compiler.nodi.expr.Identifier", (String) null, arrayList0);
      String string0 = parDeclOp0.getType();
      assertNull(string0);
  }

  @Test
  public void test04()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("|H\"?*_l", "", arrayList0);
      String string0 = parDeclOp0.getType();
      assertEquals("|H\"?*_l", parDeclOp0.getTypeStream());
      assertEquals("", string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Identifier identifier0 = new Identifier("GEOp");
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp((String) null, "EtU]", arrayList0);
      parDeclOp0.addId(identifier0);
      List<Identifier> list0 = parDeclOp0.getIdList();
      assertFalse(list0.isEmpty());
  }


  @Test
  public void test06()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("", "", arrayList0);
      // Undeclared exception!
      try { 
        parDeclOp0.addId((Identifier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("compiler.nodi.ParDeclOp", "compiler.nodi.ParDeclOp", arrayList0);
      arrayList0.add((Identifier) null);
      // Undeclared exception!
      try { 
        parDeclOp0.addAllId(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("", "", arrayList0);
      try { 
        parDeclOp0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ParDeclOp"));
      }
  }

  @Test
  public void test09()  throws Throwable  {
      ParDeclOp parDeclOp0 = null;
      try {
        parDeclOp0 = new ParDeclOp("-}0&DM.XZ:vcjS-p@T", "-}0&DM.XZ:vcjS-p@T", (List<Identifier>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ParDeclOp"));
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Identifier> linkedList0 = new LinkedList<Identifier>();
      linkedList0.add((Identifier) null);
      ParDeclOp parDeclOp0 = null;
      try {
        parDeclOp0 = new ParDeclOp("", "", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Identifier> linkedList0 = new LinkedList<Identifier>();
      ParDeclOp parDeclOp0 = null;
      try {
        parDeclOp0 = new ParDeclOp(" -XGu!q+WKIc0p&3|", " -XGu!q+WKIc0p&3|", linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.ParDeclOp"));
      }
  }



  @Test
  public void test13()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp((String) null, "EtU]", arrayList0);
      String string0 = parDeclOp0.getType();
      assertEquals("EtU]", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp((String) null, "EtU]", arrayList0);
      List<Identifier> list0 = parDeclOp0.getIdList();
      assertEquals(0, list0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp((String) null, "EtU]", arrayList0);
      String string0 = parDeclOp0.getTypeStream();
      assertNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      Identifier identifier0 = new Identifier("GEOp");
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp((String) null, "EtU]", arrayList0);
      parDeclOp0.addId(identifier0);
      parDeclOp0.addAllId(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("1H9)Ha", "1H9)Ha", arrayList0);
      String string0 = parDeclOp0.toString();
      assertEquals("ParDeclOp", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ParDeclOp parDeclOp0 = new ParDeclOp("}c1rZe", "}c1rZe", arrayList0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      ArrayList arrayList1 = (ArrayList)parDeclOp0.accept(translatorVisitor0);
      assertEquals(0, arrayList1.size());
  }
}

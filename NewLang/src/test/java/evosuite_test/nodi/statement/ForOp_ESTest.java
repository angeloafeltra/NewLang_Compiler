/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 19:07:18 GMT 2023
 */

package evosuite_test.nodi.statement;

import compiler.visitors.TranslatorVisitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.BodyOp;
import compiler.nodi.VarDeclOp;
import compiler.nodi.expr.ConstOp;
import compiler.nodi.expr.IdInitOp;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.ForOp;
import compiler.nodi.statement.Statement;
import compiler.symbolTable.SymbolTable;

import java.util.List;


public class ForOp_ESTest {


  @Test
  public void test0()  throws Throwable  {
      ForOp forOp0 = null;
      try {
        forOp0 = new ForOp((IdInitOp) null, (ConstOp) null, (BodyOp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      ConstOp constOp0 = new ConstOp("", "");
      constOp0.setParent(idInitOp0);
      ForOp forOp0 = null;
      try {
        forOp0 = new ForOp(idInitOp0, constOp0, (BodyOp) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.Vector"));
      }
  }



  @Test
  public void test2()  throws Throwable  {
      Identifier identifier0 = new Identifier("Orjyx^n");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      ConstOp constOp0 = new ConstOp("'G= OZn#Z", "'G= OZn#Z");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      ForOp forOp0 = new ForOp(idInitOp0, constOp0, bodyOp0);
      BodyOp bodyOp1 = forOp0.getBodyop();
      assertSame(bodyOp0, bodyOp1);
  }


  @Test
  public void test3()  throws Throwable  {
      Identifier identifier0 = new Identifier("Orjyx^n");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      ConstOp constOp0 = new ConstOp("'G= OZn#Z", "'G= OZn#Z");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      ForOp forOp0 = new ForOp(idInitOp0, constOp0, bodyOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("'G= OZn#Z");
      try { 
        forOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }



  @Test
  public void test4()  throws Throwable  {
      Identifier identifier0 = new Identifier("Orjyx^n");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      ConstOp constOp0 = new ConstOp("'G= OZn#Z", "'G= OZn#Z");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      ForOp forOp0 = new ForOp(idInitOp0, constOp0, bodyOp0);
      ConstOp constOp1 = forOp0.getCons();
      assertNull(constOp1.getMode());
  }

  @Test
  public void test5()  throws Throwable  {
      Identifier identifier0 = new Identifier("Orjyx^n");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      ConstOp constOp0 = new ConstOp("'G= OZn#Z", "'G= OZn#Z");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      ForOp forOp0 = new ForOp(idInitOp0, constOp0, bodyOp0);
      SymbolTable symbolTable0 = forOp0.getSymbolTable();
      assertNull(symbolTable0);
  }

  @Test
  public void test6()  throws Throwable  {
      Identifier identifier0 = new Identifier("Orjyx^n");
      IdInitOp idInitOp0 = new IdInitOp(identifier0, identifier0);
      ConstOp constOp0 = new ConstOp("'G= OZn#Z", "'G= OZn#Z");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      ForOp forOp0 = new ForOp(idInitOp0, constOp0, bodyOp0);
      String string0 = forOp0.toString();
      assertEquals("ForOp", string0);
  }
}

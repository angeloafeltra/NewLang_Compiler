/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 19:13:45 GMT 2023
 */

package evosuite_test.nodi.statement;

import compiler.nodi.expr.*;
import compiler.nodi.statement.CallFunOpStat;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import compiler.nodi.statement.WriteOp;
import compiler.visitors.TranslatorVisitor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;



public class WriteOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("", arrayList0);
      writeOp0.setUserObject("");
      String string0 = writeOp0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp((String) null, arrayList0);
      String string0 = writeOp0.getType();
      assertNull(string0);
  }

  @Test
  public void test02()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("", arrayList0);
      String string0 = writeOp0.getType();
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("compiler.nodi.statement.WriteOp", arrayList0);
      Identifier identifier0 = new Identifier("");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0, arrayList0);
      UnaryOp unaryOp0 = new UnaryOp("", callFunOpExpr0);
      arrayList0.add((Expr) unaryOp0);
      List<Expr> list0 = writeOp0.getListExpr();
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test04()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("l\"*Jxq", arrayList0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("l\"*Jxq");
      Object object0 = writeOp0.accept(translatorVisitor0);
      assertNull(object0);
  }


  @Test
  public void test05()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("DeCYc^fPABKR2zBj^", arrayList0);
      // Undeclared exception!
      try { 
        writeOp0.addsListExpr((List<Expr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.WriteOp"));
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp((String) null, arrayList0);
      Identifier identifier0 = new Identifier((String) null);
      writeOp0.addExp(identifier0);
      writeOp0.setParent(identifier0);
      // Undeclared exception!
      try { 
        writeOp0.addsListExpr(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is an ancestor
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("", arrayList0);
      writeOp0.setAllowsChildren(false);
      Identifier identifier0 = new Identifier("");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      // Undeclared exception!
      try { 
        writeOp0.addExp(callFunOpExpr0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // node does not allow children
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("", arrayList0);
      Identifier identifier0 = new Identifier("");
      identifier0.add(writeOp0);
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      // Undeclared exception!
      try { 
        writeOp0.addExp(idInitObbOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is an ancestor
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test09()  throws Throwable  {
      WriteOp writeOp0 = null;
      try {
        writeOp0 = new WriteOp((String) null, (List<Expr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.WriteOp"));
      }
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      linkedList0.add((Expr) null);
      WriteOp writeOp0 = null;
      try {
        writeOp0 = new WriteOp("", linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ConstOp constOp0 = new ConstOp((String) null, (String) null);
      Identifier identifier0 = new Identifier((String) null);
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      CallFunOpStat callFunOpStat0 = new CallFunOpStat(identifier0, arrayList0);
      constOp0.setParent(callFunOpStat0);
      linkedList0.add((Expr) constOp0);
      WriteOp writeOp0 = null;
      try {
        writeOp0 = new WriteOp("riteOQ{Gp", linkedList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.Vector"));
      }
  }



  @Test
  public void test12()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("IEtR0.sMEe?&/UocadW", arrayList0);
      String string0 = writeOp0.getType();
      assertEquals("IEtR0.sMEe?&/UocadW", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp((String) null, arrayList0);
      Identifier identifier0 = new Identifier((String) null);
      writeOp0.addExp(identifier0);
      writeOp0.addsListExpr(arrayList0);
      assertFalse(arrayList0.isEmpty());
  }


  @Test
  public void test14()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      ConstOp constOp0 = new ConstOp((String) null, (String) null);
      linkedList0.add((Expr) constOp0);
      WriteOp writeOp0 = null;
      try {
        writeOp0 = new WriteOp("riteOQ{Gp", linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.WriteOp"));
      }
  }



  @Test
  public void test15()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp("", arrayList0);
      String string0 = writeOp0.toString();
      assertEquals("WriteOp", string0);
  }


  @Test
  public void test16()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp((String) null, arrayList0);
      Identifier identifier0 = new Identifier("IfStatOp");
      writeOp0.addExp(identifier0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        writeOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }



  @Test
  public void test17()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      WriteOp writeOp0 = new WriteOp((String) null, arrayList0);
      List<Expr> list0 = writeOp0.getListExpr();
      assertEquals(0, list0.size());
  }
}

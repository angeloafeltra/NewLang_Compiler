/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:45:06 GMT 2023
 */

package evosuite_test.nodi.statement;

import compiler.visitors.TranslatorVisitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.BodyOp;
import compiler.nodi.VarDeclOp;
import compiler.nodi.expr.ConstOp;
import compiler.nodi.expr.Expr;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.IfStatOp;
import compiler.nodi.statement.Statement;
import compiler.symbolTable.SymbolTable;

import java.util.List;


public class IfStatOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      Identifier identifier0 = new Identifier("IfStatOp");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      BodyOp bodyOp1 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp1);
  }

  @Test
  public void test01()  throws Throwable  {
      Identifier identifier0 = new Identifier("IfStatOp");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0);
      BodyOp bodyOp1 = ifStatOp0.getBodyElse();
      assertNull(bodyOp1);
  }

  @Test
  public void test02()  throws Throwable  {
      IfStatOp ifStatOp0 = null;
      try {
        ifStatOp0 = new IfStatOp((Expr) null, (BodyOp) null, (BodyOp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test03()  throws Throwable  {
      IfStatOp ifStatOp0 = null;
      try {
        ifStatOp0 = new IfStatOp((Expr) null, (BodyOp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }



  @Test
  public void test04()  throws Throwable  {
      Identifier identifier0 = new Identifier("IfStatOp");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      Expr expr0 = ifStatOp0.getExpr();
      assertSame(expr0, identifier0);
  }


  @Test
  public void test05()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("");
      try { 
        ifStatOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }


  @Test
  public void test06()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      SymbolTable symbolTable0 = new SymbolTable();
      ifStatOp0.setSymbolTableElse(symbolTable0);
      SymbolTable symbolTable1 = ifStatOp0.getSymbolTableElse();
      assertSame(symbolTable1, symbolTable0);
  }

  @Test
  public void test07()  throws Throwable  {
      Identifier identifier0 = new Identifier("");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      SymbolTable symbolTable0 = ifStatOp0.getSymbolTableThen();
      assertNull(symbolTable0);
  }

  @Test
  public void test08()  throws Throwable  {
      Identifier identifier0 = new Identifier("IfStatOp");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      BodyOp bodyOp1 = ifStatOp0.getBodyThen();
      assertSame(bodyOp0, bodyOp1);
  }

  @Test
  public void test09()  throws Throwable  {
      Identifier identifier0 = new Identifier("IfStatOp");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      BodyOp bodyOp1 = ifStatOp0.getBodyElse();
      assertSame(bodyOp1, bodyOp0);
  }

  @Test
  public void test10()  throws Throwable  {
      Expr expr0 = new Expr("");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(expr0, bodyOp0);
      SymbolTable symbolTable0 = ifStatOp0.getSymbolTableElse();
      assertNull(symbolTable0);
  }

  @Test
  public void test11()  throws Throwable  {
      Identifier identifier0 = new Identifier("\"vr:uf#hckZ'knD$#");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      IfStatOp ifStatOp0 = new IfStatOp(identifier0, bodyOp0, bodyOp0);
      ifStatOp0.setSymbolTableThen((SymbolTable) null);
  }

  @Test
  public void test12()  throws Throwable  {
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      ConstOp constOp0 = new ConstOp("z'eg; B", "z'eg; B");
      IfStatOp ifStatOp0 = new IfStatOp(constOp0, bodyOp0, bodyOp0);
      String string0 = ifStatOp0.toString();
      assertEquals("IfStatOp", string0);
  }
}

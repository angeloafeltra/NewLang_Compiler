/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:40:22 GMT 2023
 */

package evosuite_test.nodi.statement;

import compiler.nodi.expr.*;
import compiler.visitors.TranslatorVisitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import compiler.nodi.statement.ReturnOp;


public class ReturnOp_ESTest {

  @Test
  public void test0()  throws Throwable  {
      ReturnOp returnOp0 = new ReturnOp();
      Identifier identifier0 = new Identifier("");
      AritAndRelOp aritAndRelOp0 = new AritAndRelOp("", identifier0, identifier0);
      returnOp0.setUserObject(aritAndRelOp0);
      String string0 = returnOp0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Expr expr0 = new Expr("compiler.nodi.statement.ReturnOp");
      ReturnOp returnOp0 = new ReturnOp(expr0);
      Expr expr1 = returnOp0.getExpr();
      assertNull(expr1.getMode());
  }


  @Test
  public void test2()  throws Throwable  {
      ReturnOp returnOp0 = new ReturnOp();
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        returnOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Expr expr0 = new Expr("compiler.nodi.statement.ReturnOp");
      Identifier identifier0 = new Identifier("compiler.nodi.statement.ReturnOp");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      expr0.setParent(callFunOpExpr0);
      ReturnOp returnOp0 = null;
      try {
        returnOp0 = new ReturnOp(expr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.Vector"));
      }
  }



  @Test
  public void test4()  throws Throwable  {
      ReturnOp returnOp0 = new ReturnOp();
      Expr expr0 = returnOp0.getExpr();
      assertNull(expr0);
  }

  @Test
  public void test5()  throws Throwable  {
      ReturnOp returnOp0 = new ReturnOp();
      String string0 = returnOp0.toString();
      assertEquals("ReturnOp", string0);
  }


  @Test
  public void test6()  throws Throwable  {
      Identifier identifier0 = new Identifier("s");
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      ReturnOp returnOp0 = new ReturnOp(idInitObbOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor("s");
      try { 
        returnOp0.accept(translatorVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // compiler.nodi.expr.Identifier cannot be cast to compiler.nodi.expr.ConstOp
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ReturnOp returnOp0 = null;
      try {
        returnOp0 = new ReturnOp((Expr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }


}

/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:42:45 GMT 2023
 */

package evosuite_test.nodi.statement;

import compiler.visitors.TranslatorVisitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.BodyOp;
import compiler.nodi.VarDeclOp;
import compiler.nodi.expr.Expr;
import compiler.nodi.expr.IdInitObbOp;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.Statement;
import compiler.nodi.statement.WhileOp;
import compiler.symbolTable.SymbolTable;

import java.util.List;

public class WhileOp_ESTest {


  @Test
  public void test0()  throws Throwable  {
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      Identifier identifier0 = new Identifier("a,Td{&");
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      WhileOp whileOp0 = new WhileOp(idInitObbOp0, bodyOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        whileOp0.accept(translatorVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // compiler.nodi.expr.Identifier cannot be cast to compiler.nodi.expr.ConstOp
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test1()  throws Throwable  {
      WhileOp whileOp0 = null;
      try {
        whileOp0 = new WhileOp((Expr) null, (BodyOp) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      Identifier identifier0 = new Identifier("");
      WhileOp whileOp0 = new WhileOp(identifier0, bodyOp0);
      SymbolTable symbolTable0 = whileOp0.getSymbolTable();
      assertNull(symbolTable0);
  }

  @Test
  public void test3()  throws Throwable  {
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      Expr expr0 = new Expr("");
      WhileOp whileOp0 = new WhileOp(expr0, bodyOp0);
      Expr expr1 = whileOp0.getExpr();
      assertNull(expr1.getMode());
  }

  @Test
  public void test4()  throws Throwable  {
      Expr expr0 = new Expr((String) null);
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      WhileOp whileOp0 = new WhileOp(expr0, bodyOp0);
      BodyOp bodyOp1 = whileOp0.getBody();
      assertSame(bodyOp1, bodyOp0);
  }

  @Test
  public void test5()  throws Throwable  {
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      Identifier identifier0 = new Identifier("a,Td{&");
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      WhileOp whileOp0 = new WhileOp(idInitObbOp0, bodyOp0);
      whileOp0.setSymbolTable((SymbolTable) null);
  }

  @Test
  public void test6()  throws Throwable  {
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      Identifier identifier0 = new Identifier("md@])GW1t!>+7i@E61");
      WhileOp whileOp0 = new WhileOp(identifier0, bodyOp0);
      String string0 = whileOp0.toString();
      assertEquals("WhileOp", string0);
  }


  @Test
  public void test7()  throws Throwable  {
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      Identifier identifier0 = new Identifier("strcat");
      BodyOp bodyOp0 = new BodyOp((List<VarDeclOp>) null, (List<Statement>) null);
      WhileOp whileOp0 = new WhileOp(identifier0, bodyOp0);
      try { 
        whileOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }


}

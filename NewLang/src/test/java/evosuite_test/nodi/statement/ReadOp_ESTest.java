/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 19:00:47 GMT 2023
 */

package evosuite_test.nodi.statement;

import compiler.nodi.ParDeclOp;
import compiler.nodi.expr.CallFunOpExpr;
import compiler.nodi.expr.IdInitObbOp;
import compiler.visitors.Visitor;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;

import compiler.nodi.expr.Expr;
import compiler.nodi.expr.Identifier;
import compiler.nodi.statement.ReadOp;
import compiler.visitors.TranslatorVisitor;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class ReadOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      Identifier identifier0 = new Identifier("MJQmXe+nC3");
      ReadOp readOp0 = new ReadOp(arrayList0, identifier0);
      Expr expr0 = readOp0.getExpr();
      assertSame(expr0, identifier0);
  }


  @Test
  public void test01()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      // Undeclared exception!
      try { 
        readOp0.addsListId((List<Identifier>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.ReadOp"));
      }
  }

  @Test
  public void test02()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      Identifier identifier0 = new Identifier("Cn,<fRxEH,r[$F");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      ReadOp readOp0 = new ReadOp(arrayList0, callFunOpExpr0);
      readOp0.setAllowsChildren(false);
      // Undeclared exception!
      try { 
        readOp0.addId(identifier0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // node does not allow children
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test03()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      // Undeclared exception!
      try { 
        readOp0.addId((Identifier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      Identifier identifier0 = new Identifier("compiler.nodi.statement.ReadOp");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      ReadOp readOp0 = new ReadOp(arrayList0, callFunOpExpr0);
      identifier0.setParent(readOp0);
      // Undeclared exception!
      try { 
        readOp0.addId(identifier0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.Vector"));
      }
  }

  @Test
  public void test05()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      Identifier identifier0 = new Identifier((String) null);
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      ReadOp readOp0 = new ReadOp(arrayList0, idInitObbOp0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        readOp0.accept(translatorVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // compiler.nodi.expr.Identifier cannot be cast to compiler.nodi.expr.ConstOp
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp((List<Identifier>) null, (Expr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.ReadOp"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<Identifier> linkedList0 = new LinkedList<Identifier>();
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp(linkedList0, (Expr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LinkedList<Identifier> linkedList0 = new LinkedList<Identifier>();
      Identifier identifier0 = new Identifier((String) null);
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp(linkedList0, identifier0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.ReadOp"));
      }
  }

  @Test
  public void test09()  throws Throwable  {
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp((List<Identifier>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.ReadOp"));
      }
  }

  @Test
  public void test10()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      arrayList0.add((Identifier) null);
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp(arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedList<Identifier> linkedList0 = new LinkedList<Identifier>();
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.ReadOp"));
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      Identifier identifier0 = new Identifier("ReadVp");
      ParDeclOp parDeclOp0 = new ParDeclOp("%$#xf{cXcA*", "%$#xf{cXcA*", arrayList0);
      identifier0.setParent(parDeclOp0);
      arrayList0.add(identifier0);
      ReadOp readOp0 = null;
      try {
        readOp0 = new ReadOp(arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.Vecto"));
      }
  }


  @Test
  public void test13()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      List<Identifier> list0 = readOp0.getListId();
      assertEquals(0, list0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      Expr expr0 = readOp0.getExpr();
      assertNull(expr0);
  }

  @Test
  public void test15()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      Identifier identifier0 = new Identifier("&fJaMemj2M:ic2o");
      readOp0.addId(identifier0);
      readOp0.addsListId(arrayList0);
      assertTrue(arrayList0.contains(identifier0));
  }

  @Test
  public void test16()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      Identifier identifier0 = new Identifier("1sobjL_WzE.bOOh-A");
      arrayList0.add(identifier0);
      ReadOp readOp0 = new ReadOp(arrayList0);
      List<Identifier> list0 = readOp0.getListId();
      assertFalse(list0.isEmpty());
  }

  @Test
  public void test17()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      Identifier identifier0 = new Identifier("&fJaMemj2M:ic2o");
      readOp0.addId(identifier0);
      ReadOp readOp1 = new ReadOp(arrayList0, identifier0);
      assertFalse(readOp1.equals((Object)readOp0));
  }

  @Test
  public void test18()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      String string0 = readOp0.toString();
      assertEquals("ReadOp", string0);
  }

  @Test
  public void test19()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      Object object0 = readOp0.accept(translatorVisitor0);
      assertNull(object0);
  }


  @Test
  public void test20()  throws Throwable  {
      ArrayList<Identifier> arrayList0 = new ArrayList<Identifier>();
      ReadOp readOp0 = new ReadOp(arrayList0);
      try { 
        readOp0.accept((Visitor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.statement.ReadOp"));
      }
  }

}

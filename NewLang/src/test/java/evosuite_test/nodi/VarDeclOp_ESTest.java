/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:55:58 GMT 2023
 */

package evosuite_test.nodi;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.nodi.VarDeclOp;
import compiler.nodi.expr.CallFunOpExpr;
import compiler.nodi.expr.Expr;
import compiler.nodi.expr.IdInitObbOp;
import compiler.nodi.expr.Identifier;
import compiler.nodi.expr.UnaryOp;
import compiler.nodi.statement.WriteOp;
import compiler.visitors.TranslatorVisitor;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;

public class VarDeclOp_ESTest {

  @Test
  public void test00()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp((String) null, arrayList0);
      varDeclOp0.setType("*");
      String string0 = varDeclOp0.getType();
      assertEquals("*", string0);
  }

  @Test
  public void test01()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("", arrayList0);
      String string0 = varDeclOp0.getType();
      assertEquals("", string0);
  }

  @Test
  public void test02()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      Identifier identifier0 = new Identifier("compiler.nodi.VarDeclOp");
      CallFunOpExpr callFunOpExpr0 = new CallFunOpExpr(identifier0);
      UnaryOp unaryOp0 = new UnaryOp("L;", callFunOpExpr0);
      arrayList0.add((Expr) unaryOp0);
      VarDeclOp varDeclOp0 = new VarDeclOp("L;", arrayList0);
      List<Expr> list0 = varDeclOp0.getExprList();
      assertEquals(1, list0.size());
  }


  @Test
  public void test03()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp("VarDeclOp", arrayList0);
      // Undeclared exception!
      try { 
        varDeclOp0.addsId((List<Expr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.ArrayList"));
      }
  }

  @Test
  public void test04()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp((String) null, arrayList0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor((String) null);
      try { 
        varDeclOp0.accept(translatorVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }

  @Test
  public void test05()  throws Throwable  {
      VarDeclOp varDeclOp0 = null;
      try {
        varDeclOp0 = new VarDeclOp("", (List<Expr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.VarDeclOp"));
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      arrayList0.add((Expr) null);
      VarDeclOp varDeclOp0 = null;
      try {
        varDeclOp0 = new VarDeclOp("gN-;2fp-\"Q", arrayList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // new child is null
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("javax.swing.tree.DefaultMutableTreeNode"));
      }
  }

  @Test
  public void test07()  throws Throwable  {
      LinkedList<Expr> linkedList0 = new LinkedList<Expr>();
      VarDeclOp varDeclOp0 = null;
      try {
        varDeclOp0 = new VarDeclOp("", linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.nodi.VarDeclOp"));
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      Expr expr0 = new Expr("EQOp");
      WriteOp writeOp0 = new WriteOp("EQOp", arrayList0);
      expr0.setParent(writeOp0);
      arrayList0.add(expr0);
      VarDeclOp varDeclOp0 = null;
      try {
        varDeclOp0 = new VarDeclOp("EQOp", arrayList0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("java.util.Vector"));
      }
  }



  @Test
  public void test09()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp((String) null, arrayList0);
      String string0 = varDeclOp0.getType();
      assertNull(string0);
  }

  @Test
  public void test10()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp((String) null, arrayList0);
      List<Expr> list0 = varDeclOp0.getExprList();
      assertEquals(0, list0.size());
  }


  @Test
  public void test11()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      Identifier identifier0 = new Identifier("V#YLr<#[PS&mvsr");
      IdInitObbOp idInitObbOp0 = new IdInitObbOp(identifier0, identifier0);
      arrayList0.add((Expr) idInitObbOp0);
      VarDeclOp varDeclOp0 = new VarDeclOp("V#YLr<#[PS&mvsr", arrayList0);
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      try { 
        varDeclOp0.accept(translatorVisitor0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // compiler.nodi.expr.Identifier cannot be cast to compiler.nodi.expr.ConstOp
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.visitors.TranslatorVisitor"));
      }
  }



  @Test
  public void test12()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp((String) null, arrayList0);
      varDeclOp0.addsId(arrayList0);
      assertNull(varDeclOp0.getType());
  }

  @Test
  public void test13()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      TranslatorVisitor translatorVisitor0 = new TranslatorVisitor();
      VarDeclOp varDeclOp0 = new VarDeclOp("c_gen.c", arrayList0);
      Object object0 = varDeclOp0.accept(translatorVisitor0);
      assertNull(object0);
  }

  @Test
  public void test14()  throws Throwable  {
      ArrayList<Expr> arrayList0 = new ArrayList<Expr>();
      VarDeclOp varDeclOp0 = new VarDeclOp(",|1o+MuJnFg)@", arrayList0);
      varDeclOp0.addId((Expr) null);
      assertEquals(",|1o+MuJnFg)@", varDeclOp0.getType());
  }
}

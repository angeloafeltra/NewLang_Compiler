/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 18:59:34 GMT 2023
 */

package evosuite_test;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.symbolTable.RowTable;
import compiler.symbolTable.SymbolTable;
import compiler.symbolTable.TypeField;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.junit.runner.RunWith;

public class SymbolTable_ESTest {



  @Test
  public void test02()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      List<RowTable> list0 = symbolTable0.getListRow();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, list0, "P#'82aDE");
      String string0 = symbolTable1.getScope();
      assertEquals("P#'82aDE", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      List<RowTable> list0 = symbolTable0.getListRow();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, list0, "");
      String string0 = symbolTable1.getScope();
      assertEquals("", string0);
  }

  @Test
  public void test04()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, (List<RowTable>) null, (String) null);
      List<RowTable> list0 = symbolTable1.getListRow();
      assertNull(list0);
  }

  @Test
  public void test05()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      RowTable rowTable0 = new RowTable("r*9", symbolTable0, typeField_TypeFieldFunction0, "r*9");
      symbolTable0.addRow(rowTable0);
      List<RowTable> list0 = symbolTable0.getListRow();
      assertTrue(list0.contains(rowTable0));
  }

  @Test
  public void test06()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, (List<RowTable>) null, "wKc)N9");
      // Undeclared exception!
      try { 
        symbolTable1.probe("wKc)N9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.SymbolTable"));
      }
  }



  @Test
  public void test08()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, (List<RowTable>) null, "{@H`0^5.|%`C.PsR");
      // Undeclared exception!
      try { 
        symbolTable1.lookup("{@H`0^5.|%`C.PsR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      // Undeclared exception!
      try { 
        symbolTable0.addRow((RowTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.SymbolTable"));
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      LinkedList<RowTable> linkedList0 = new LinkedList<RowTable>();
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable(symbolTable0, linkedList0, "R8ot");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to java.util.ArrayList
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.SymbolTable"));

      }
  }

  @Test
  public void test11()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      RowTable rowTable0 = new RowTable("8p@UYP0dFx", symbolTable0, typeField_TypeFieldFunction0, "8p@UYP0dFx");
      symbolTable0.addRow(rowTable0);
      boolean boolean0 = symbolTable0.probe("8p@UYP0dFx");
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      String string0 = symbolTable0.getScope();
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      SymbolTable symbolTable1 = symbolTable0.getFather();
      assertNull(symbolTable1);
  }

  @Test
  public void test14()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      RowTable rowTable0 = new RowTable("Bq", symbolTable0, (TypeField) null, "Bq");
      symbolTable0.addRow(rowTable0);
      // Undeclared exception!
      try { 
        symbolTable0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //

          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.SymbolTable"));
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      symbolTable0.setFather(symbolTable0);
      String string0 = symbolTable0.toString();
      assertEquals("SymbolTable: null\nFather: null\n", string0);
  }

  @Test
  public void test16()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      ArrayList<RowTable> arrayList0 = new ArrayList<RowTable>();
      SymbolTable symbolTable1 = new SymbolTable();
      SymbolTable symbolTable2 = new SymbolTable(symbolTable1, arrayList0, "Root");
      symbolTable0.setFather(symbolTable2);
      String string0 = symbolTable0.getTypeFun();
      assertNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      ArrayList<RowTable> arrayList0 = new ArrayList<RowTable>();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, arrayList0, "VeZU");
      symbolTable0.setFather(symbolTable1);
      // Undeclared exception!
      try { 
        symbolTable0.getTypeFun();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      RowTable rowTable0 = new RowTable("Bq", symbolTable0, (TypeField) null, "Bq");
      symbolTable0.addRow(rowTable0);
      RowTable rowTable1 = symbolTable0.lookup("Bq");
      assertEquals("Bq", rowTable1.getPropreties());
  }

  @Test
  public void test19()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      RowTable rowTable0 = new RowTable("Bq", (Object) null, (TypeField) null, "Bq");
      symbolTable0.addRow(rowTable0);
      RowTable rowTable1 = symbolTable0.lookup("Aq");
      assertNull(rowTable1);
  }

  @Test
  public void test20()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      RowTable rowTable0 = new RowTable("Bq", "Bq", (TypeField) null, "Bq");
      symbolTable0.addRow(rowTable0);
      boolean boolean0 = symbolTable0.probe("Aq");
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      ArrayList<RowTable> arrayList0 = new ArrayList<RowTable>();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, arrayList0, "Root");
      RowTable rowTable0 = new RowTable("Root", arrayList0, (TypeField) null, "Root");
      symbolTable1.addRow(rowTable0);
      assertNotSame(symbolTable0, symbolTable1);
  }

  @Test
  public void test22()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      RowTable rowTable0 = new RowTable("-q", "-q", (TypeField) null, "-q");
      ArrayList<RowTable> arrayList0 = new ArrayList<RowTable>();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, arrayList0, "-q");
      try { 
        symbolTable1.addRow(rowTable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Dichiarazione Multipla
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.SymbolTable"));
      }
  }

  @Test
  public void test23()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      RowTable rowTable0 = new RowTable("Bq", (Object) null, (TypeField) null, "Bq");
      symbolTable0.addRow(rowTable0);
      try { 
        symbolTable0.addRow(rowTable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Dichiarazione Multipla
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.SymbolTable"));
      }
  }

  @Test
  public void test24()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      List<RowTable> list0 = symbolTable0.getListRow();
      SymbolTable symbolTable1 = new SymbolTable(symbolTable0, list0, "7K>]>=]V9?Ov[");
      SymbolTable symbolTable2 = symbolTable1.getFather();
      assertNotSame(symbolTable2, symbolTable1);
  }

  @Test
  public void test25()  throws Throwable  {
      SymbolTable symbolTable0 = new SymbolTable();
      symbolTable0.setScope("3*AC`}VPld");
      assertEquals("3*AC`}VPld", symbolTable0.getScope());
  }
}

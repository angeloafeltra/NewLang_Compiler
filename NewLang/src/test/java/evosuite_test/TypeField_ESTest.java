/*
 * This file was automatically generated by EvoSuite
 * Mon May 22 19:06:09 GMT 2023
 */

package evosuite_test;

import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.jupiter.api.Test;
import static org.junit.Assert.*;
import compiler.symbolTable.TypeField;
import java.util.List;
import org.junit.runner.RunWith;


public class TypeField_ESTest {

  @Test
  public void test0()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      String string0 = typeField_TypeFieldFunction0.toString();
      assertEquals("->[]", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction((List<String>) null, (List<String>) null);
      // Undeclared exception!
      try { 
        typeField_TypeFieldFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
          String stacktrace = ExceptionUtils.getStackTrace(e);
          assertTrue(stacktrace.contains("compiler.symbolTable.TypeField$TypeFieldFunction"));
      }
  }

  @Test
  public void test2()  throws Throwable  {
      TypeField.TypeFieldVar typeField_TypeFieldVar0 = new TypeField.TypeFieldVar((String) null);
      typeField_TypeFieldVar0.setType("");
      assertEquals("", typeField_TypeFieldVar0.getType());
  }

  @Test
  public void test3()  throws Throwable  {
      TypeField.TypeFieldVar typeField_TypeFieldVar0 = new TypeField.TypeFieldVar("");
      String string0 = typeField_TypeFieldVar0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      TypeField.TypeFieldVar typeField_TypeFieldVar0 = new TypeField.TypeFieldVar("");
      String string0 = typeField_TypeFieldVar0.getType();
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      List<String> list0 = typeField_TypeFieldFunction0.getOutputParam();
      typeField_TypeFieldFunction0.addsListInputParam(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test6()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      List<String> list0 = typeField_TypeFieldFunction0.getInputParam();
      TypeField.TypeFieldFunction typeField_TypeFieldFunction1 = new TypeField.TypeFieldFunction(list0, (List<String>) null);
      assertFalse(typeField_TypeFieldFunction1.equals((Object)typeField_TypeFieldFunction0));
  }

  @Test
  public void test7()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      typeField_TypeFieldFunction0.addOutputParam("w*a=Yp)S%wpn`&T(-m");
  }

  @Test
  public void test8()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      List<String> list0 = typeField_TypeFieldFunction0.getOutputParam();
      typeField_TypeFieldFunction0.addsListOutputParam(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test9()  throws Throwable  {
      TypeField.TypeFieldFunction typeField_TypeFieldFunction0 = new TypeField.TypeFieldFunction();
      typeField_TypeFieldFunction0.addInputParam("Ah-j`Ega3}6Jg-");
      String string0 = typeField_TypeFieldFunction0.toString();
      assertEquals("[Ah-j`Ega3}6Jg-]->[]", string0);
  }
}

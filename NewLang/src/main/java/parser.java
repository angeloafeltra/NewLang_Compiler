
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import main.java.nodi.*;
import main.java.nodi.expr.*;
import main.java.nodi.statement.*;
import javax.swing.tree.DefaultMutableTreeNode;
import java.util.ArrayList;
import main.java.utilsClass.Decl;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\007\007\000\002\010\005\000\002\010\007" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\012\000\002\013\006\000\002\014\002\000\002\014" +
    "\003\000\002\015\003\000\002\015\005\000\002\016\004" +
    "\000\002\016\005\000\002\017\003\000\002\017\003\000" +
    "\002\020\002\000\002\020\004\000\002\021\002\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\022\005\000\002\022\004\000" +
    "\002\023\007\000\002\024\002\000\002\024\004\000\002" +
    "\025\006\000\002\026\012\000\002\027\005\000\002\027" +
    "\004\000\002\030\004\000\002\031\004\000\002\031\002" +
    "\000\002\032\006\000\002\032\006\000\002\033\005\000" +
    "\002\034\006\000\002\034\005\000\002\035\003\000\002" +
    "\035\005\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\004\000\002\036\004\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\022\004\ufffd\010\013\011\005\012\016\013" +
    "\012\014\007\015\017\017\015\001\002\000\004\041\243" +
    "\001\002\000\006\034\ufff9\041\ufff9\001\002\000\004\002" +
    "\242\001\002\000\006\034\ufff8\041\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\010\013\011\005\012\016\013\012\014" +
    "\007\015\017\017\015\001\002\000\024\002\ufffd\004\ufffd" +
    "\010\013\011\005\012\016\013\012\014\007\015\017\017" +
    "\015\001\002\000\006\034\ufff6\041\ufff6\001\002\000\004" +
    "\041\221\001\002\000\004\004\215\001\002\000\004\041" +
    "\020\001\002\000\006\034\ufff7\041\ufff7\001\002\000\006" +
    "\034\ufff5\041\ufff5\001\002\000\004\032\021\001\002\000" +
    "\020\011\005\012\016\013\012\014\007\015\017\020\026" +
    "\033\uffe6\001\002\000\004\033\040\001\002\000\004\041" +
    "\030\001\002\000\006\007\uffe4\033\uffe4\001\002\000\006" +
    "\007\035\033\uffe5\001\002\000\014\011\005\012\016\013" +
    "\012\014\007\015\017\001\002\000\004\041\030\001\002" +
    "\000\014\006\032\007\uffc8\027\uffc8\033\uffc8\037\uffc8\001" +
    "\002\000\006\007\uffe1\033\uffe1\001\002\000\004\041\030" +
    "\001\002\000\012\007\uffca\027\uffca\033\uffca\037\uffca\001" +
    "\002\000\012\007\uffc9\027\uffc9\033\uffc9\037\uffc9\001\002" +
    "\000\016\011\005\012\016\013\012\014\007\015\017\020" +
    "\026\001\002\000\006\007\uffe3\033\uffe3\001\002\000\006" +
    "\007\uffe2\033\uffe2\001\002\000\004\036\041\001\002\000" +
    "\016\011\005\012\016\013\012\014\007\015\017\016\044" +
    "\001\002\000\004\034\045\001\002\000\004\034\uffe0\001" +
    "\002\000\004\034\uffdf\001\002\000\034\010\013\011\005" +
    "\012\016\013\012\014\007\015\017\021\uffde\022\uffde\024" +
    "\uffde\032\uffde\035\uffde\040\uffde\041\uffde\001\002\000\024" +
    "\002\uffe8\004\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\001\002\000\020\021\054\022\057" +
    "\024\052\032\056\035\uffdc\040\067\041\063\001\002\000" +
    "\034\010\013\011\005\012\016\013\012\014\007\015\017" +
    "\021\uffde\022\uffde\024\uffde\032\uffde\035\uffde\040\uffde\041" +
    "\uffde\001\002\000\020\021\uffdd\022\uffdd\024\uffdd\032\uffdd" +
    "\035\uffdd\040\uffdd\041\uffdd\001\002\000\026\032\100\041" +
    "\105\042\104\043\074\044\076\045\106\046\077\047\102" +
    "\051\073\066\107\001\002\000\020\021\uffd5\022\uffd5\024" +
    "\uffd5\032\uffd5\035\uffd5\040\uffd5\041\uffd5\001\002\000\004" +
    "\041\203\001\002\000\020\021\uffda\022\uffda\024\uffda\032" +
    "\uffda\035\uffda\040\uffda\041\uffda\001\002\000\026\032\100" +
    "\041\105\042\104\043\074\044\076\045\106\046\077\047" +
    "\102\051\073\066\107\001\002\000\026\032\100\041\105" +
    "\042\104\043\074\044\076\045\106\046\077\047\102\051" +
    "\073\066\107\001\002\000\004\035\170\001\002\000\004" +
    "\005\167\001\002\000\004\005\166\001\002\000\012\006" +
    "\032\027\uffc8\032\145\037\uffc8\001\002\000\006\027\162" +
    "\037\163\001\002\000\004\005\161\001\002\000\020\021" +
    "\054\022\057\024\052\032\056\035\uffdc\040\067\041\063" +
    "\001\002\000\030\005\101\032\100\041\105\042\104\043" +
    "\074\044\076\045\106\046\077\047\102\051\073\066\107" +
    "\001\002\000\004\005\072\001\002\000\020\021\uffd9\022" +
    "\uffd9\024\uffd9\032\uffd9\035\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\020\021\uffd8\022\uffd8\024\uffd8\032\uffd8\035\uffd8\040" +
    "\uffd8\041\uffd8\001\002\000\026\032\100\041\105\042\104" +
    "\043\074\044\076\045\106\046\077\047\102\051\073\066" +
    "\107\001\002\000\050\005\uffbd\006\uffbd\026\uffbd\033\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\067\uffbd\001\002\000\040\005\156\050\115\051" +
    "\111\052\122\053\121\054\113\055\124\056\116\057\123" +
    "\060\125\061\117\062\120\063\114\064\112\065\126\001" +
    "\002\000\050\005\uffbc\006\uffbc\026\uffbc\033\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\067\uffbc\001\002\000\050\005\uffc0\006\uffc0\026\uffc0\033" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\067\uffc0\001\002\000\026\032\100\041\105" +
    "\042\104\043\074\044\076\045\106\046\077\047\102\051" +
    "\073\066\107\001\002\000\020\021\uffd2\022\uffd2\024\uffd2" +
    "\032\uffd2\035\uffd2\040\uffd2\041\uffd2\001\002\000\050\005" +
    "\uffbf\006\uffbf\026\uffbf\033\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf\001\002" +
    "\000\050\005\uffb9\006\uffb9\026\uffb9\033\uffb9\050\uffb9\051" +
    "\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9" +
    "\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\067" +
    "\uffb9\001\002\000\050\005\uffbe\006\uffbe\026\uffbe\033\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\067\uffbe\001\002\000\052\005\uffba\006\uffba\026" +
    "\uffba\032\145\033\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062" +
    "\uffba\063\uffba\064\uffba\065\uffba\067\uffba\001\002\000\050" +
    "\005\uffbb\006\uffbb\026\uffbb\033\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\067\uffbb\001" +
    "\002\000\026\032\100\041\105\042\104\043\074\044\076" +
    "\045\106\046\077\047\102\051\073\066\107\001\002\000" +
    "\050\005\uffa9\006\uffa9\026\uffa9\033\uffa9\050\115\051\111" +
    "\052\122\053\121\054\113\055\124\056\116\057\123\060" +
    "\125\061\117\062\120\063\114\064\uffa9\065\uffa9\067\uffa9" +
    "\001\002\000\026\032\100\041\105\042\104\043\074\044" +
    "\076\045\106\046\077\047\102\051\073\066\107\001\002" +
    "\000\026\032\100\041\105\042\104\043\074\044\076\045" +
    "\106\046\077\047\102\051\073\066\107\001\002\000\026" +
    "\032\100\041\105\042\104\043\074\044\076\045\106\046" +
    "\077\047\102\051\073\066\107\001\002\000\026\032\100" +
    "\041\105\042\104\043\074\044\076\045\106\046\077\047" +
    "\102\051\073\066\107\001\002\000\026\032\100\041\105" +
    "\042\104\043\074\044\076\045\106\046\077\047\102\051" +
    "\073\066\107\001\002\000\026\032\100\041\105\042\104" +
    "\043\074\044\076\045\106\046\077\047\102\051\073\066" +
    "\107\001\002\000\026\032\100\041\105\042\104\043\074" +
    "\044\076\045\106\046\077\047\102\051\073\066\107\001" +
    "\002\000\026\032\100\041\105\042\104\043\074\044\076" +
    "\045\106\046\077\047\102\051\073\066\107\001\002\000" +
    "\026\032\100\041\105\042\104\043\074\044\076\045\106" +
    "\046\077\047\102\051\073\066\107\001\002\000\026\032" +
    "\100\041\105\042\104\043\074\044\076\045\106\046\077" +
    "\047\102\051\073\066\107\001\002\000\026\032\100\041" +
    "\105\042\104\043\074\044\076\045\106\046\077\047\102" +
    "\051\073\066\107\001\002\000\026\032\100\041\105\042" +
    "\104\043\074\044\076\045\106\046\077\047\102\051\073" +
    "\066\107\001\002\000\026\032\100\041\105\042\104\043" +
    "\074\044\076\045\106\046\077\047\102\051\073\066\107" +
    "\001\002\000\026\032\100\041\105\042\104\043\074\044" +
    "\076\045\106\046\077\047\102\051\073\066\107\001\002" +
    "\000\050\005\uffb1\006\uffb1\026\uffb1\033\uffb1\050\115\051" +
    "\111\052\122\053\121\054\113\055\124\056\116\057\123" +
    "\060\125\061\117\062\120\063\114\064\112\065\uffb1\067" +
    "\uffb1\001\002\000\034\005\uffae\006\uffae\026\uffae\033\uffae" +
    "\050\115\051\111\052\122\053\121\054\113\055\124\064" +
    "\uffae\065\uffae\067\uffae\001\002\000\050\005\uffb2\006\uffb2" +
    "\026\uffb2\033\uffb2\050\115\051\111\052\122\053\121\054" +
    "\113\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\067\uffb2\001\002\000\034\005" +
    "\uffab\006\uffab\026\uffab\033\uffab\050\115\051\111\052\122" +
    "\053\121\054\113\055\124\064\uffab\065\uffab\067\uffab\001" +
    "\002\000\050\005\uffb6\006\uffb6\026\uffb6\033\uffb6\050\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\113\055\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\067\uffb6\001\002\000\050\005\uffb5\006\uffb5\026\uffb5\033" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\113\055\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\067\uffb5\001\002\000\034\005\uffb0\006\uffb0" +
    "\026\uffb0\033\uffb0\050\115\051\111\052\122\053\121\054" +
    "\113\055\124\064\uffb0\065\uffb0\067\uffb0\001\002\000\034" +
    "\005\uffad\006\uffad\026\uffad\033\uffad\050\115\051\111\052" +
    "\122\053\121\054\113\055\124\064\uffad\065\uffad\067\uffad" +
    "\001\002\000\034\005\uffac\006\uffac\026\uffac\033\uffac\050" +
    "\115\051\111\052\122\053\121\054\113\055\124\064\uffac" +
    "\065\uffac\067\uffac\001\002\000\050\005\uffb8\006\uffb8\026" +
    "\uffb8\033\uffb8\050\uffb8\051\uffb8\052\122\053\121\054\113" +
    "\055\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063" +
    "\uffb8\064\uffb8\065\uffb8\067\uffb8\001\002\000\034\005\uffaf" +
    "\006\uffaf\026\uffaf\033\uffaf\050\115\051\111\052\122\053" +
    "\121\054\113\055\124\064\uffaf\065\uffaf\067\uffaf\001\002" +
    "\000\050\005\uffb3\006\uffb3\026\uffb3\033\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\067" +
    "\uffb3\001\002\000\050\005\uffb4\006\uffb4\026\uffb4\033\uffb4" +
    "\050\115\051\111\052\122\053\121\054\113\055\124\056" +
    "\116\057\123\060\125\061\117\062\120\063\114\064\uffb4" +
    "\065\uffb4\067\uffb4\001\002\000\050\005\uffb7\006\uffb7\026" +
    "\uffb7\033\uffb7\050\uffb7\051\uffb7\052\122\053\121\054\113" +
    "\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\067\uffb7\001\002\000\030\032\100" +
    "\033\150\041\105\042\104\043\074\044\076\045\106\046" +
    "\077\047\102\051\073\066\107\001\002\000\044\005\uffc2" +
    "\006\152\033\uffc2\050\115\051\111\052\122\053\121\054" +
    "\113\055\124\056\116\057\123\060\125\061\117\062\120" +
    "\063\114\064\112\065\126\001\002\000\004\033\151\001" +
    "\002\000\050\005\uffc3\006\uffc3\026\uffc3\033\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057" +
    "\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\067\uffc3\001\002\000\050\005\uffc4\006\uffc4\026\uffc4\033" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064" +
    "\uffc4\065\uffc4\067\uffc4\001\002\000\026\032\100\041\105" +
    "\042\104\043\074\044\076\045\106\046\077\047\102\051" +
    "\073\066\107\001\002\000\006\005\uffc1\033\uffc1\001\002" +
    "\000\040\033\155\050\115\051\111\052\122\053\121\054" +
    "\113\055\124\056\116\057\123\060\125\061\117\062\120" +
    "\063\114\064\112\065\126\001\002\000\050\005\uffa8\006" +
    "\uffa8\026\uffa8\033\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8" +
    "\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\067\uffa8\001\002\000\020" +
    "\021\uffd3\022\uffd3\024\uffd3\032\uffd3\035\uffd3\040\uffd3\041" +
    "\uffd3\001\002\000\050\005\uffaa\006\uffaa\026\uffaa\033\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\067\uffaa\001\002\000\004\035\uffdb\001\002\000" +
    "\020\021\uffd7\022\uffd7\024\uffd7\032\uffd7\035\uffd7\040\uffd7" +
    "\041\uffd7\001\002\000\006\005\uffcb\044\165\001\002\000" +
    "\026\032\100\041\105\042\104\043\074\044\076\045\106" +
    "\046\077\047\102\051\073\066\107\001\002\000\004\005" +
    "\uffc5\001\002\000\004\005\uffcc\001\002\000\020\021\uffd4" +
    "\022\uffd4\024\uffd4\032\uffd4\035\uffd4\040\uffd4\041\uffd4\001" +
    "\002\000\020\021\uffd6\022\uffd6\024\uffd6\032\uffd6\035\uffd6" +
    "\040\uffd6\041\uffd6\001\002\000\044\002\uffe7\004\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\032\uffe7\035\uffe7\040" +
    "\uffe7\041\uffe7\001\002\000\040\050\115\051\111\052\122" +
    "\053\121\054\113\055\124\056\116\057\123\060\125\061" +
    "\117\062\120\063\114\064\112\065\126\067\172\001\002" +
    "\000\004\034\045\001\002\000\022\021\uffd0\022\uffd0\023" +
    "\174\024\uffd0\032\uffd0\035\uffd0\040\uffd0\041\uffd0\001\002" +
    "\000\004\034\045\001\002\000\020\021\uffd1\022\uffd1\024" +
    "\uffd1\032\uffd1\035\uffd1\040\uffd1\041\uffd1\001\002\000\020" +
    "\021\uffcf\022\uffcf\024\uffcf\032\uffcf\035\uffcf\040\uffcf\041" +
    "\uffcf\001\002\000\004\033\200\001\002\000\006\030\201" +
    "\031\202\001\002\000\004\005\uffc7\001\002\000\004\005" +
    "\uffc6\001\002\000\004\037\204\001\002\000\004\042\205" +
    "\001\002\000\004\025\206\001\002\000\004\042\207\001" +
    "\002\000\004\026\210\001\002\000\004\034\045\001\002" +
    "\000\020\021\uffcd\022\uffcd\024\uffcd\032\uffcd\035\uffcd\040" +
    "\uffcd\041\uffcd\001\002\000\040\026\213\050\115\051\111" +
    "\052\122\053\121\054\113\055\124\056\116\057\123\060" +
    "\125\061\117\062\120\063\114\064\112\065\126\001\002" +
    "\000\004\034\045\001\002\000\020\021\uffce\022\uffce\024" +
    "\uffce\032\uffce\035\uffce\040\uffce\041\uffce\001\002\000\004" +
    "\017\015\001\002\000\022\002\ufffd\010\013\011\005\012" +
    "\016\013\012\014\007\015\017\017\015\001\002\000\004" +
    "\002\001\001\002\000\022\002\ufffc\010\ufffc\011\ufffc\012" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\017\ufffc\001\002\000\004" +
    "\037\236\001\002\000\006\005\224\006\223\001\002\000" +
    "\004\041\225\001\002\000\042\002\ufffa\004\ufffa\010\ufffa" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\017\ufffa\021" +
    "\ufffa\022\ufffa\024\ufffa\032\ufffa\035\ufffa\040\ufffa\041\ufffa" +
    "\001\002\000\004\037\226\001\002\000\016\042\230\043" +
    "\233\044\227\045\235\046\231\047\232\001\002\000\006" +
    "\005\uffea\006\uffea\001\002\000\006\005\uffee\006\uffee\001" +
    "\002\000\006\005\uffec\006\uffec\001\002\000\006\005\uffeb" +
    "\006\uffeb\001\002\000\006\005\uffed\006\uffed\001\002\000" +
    "\006\005\uffef\006\uffef\001\002\000\006\005\uffe9\006\uffe9" +
    "\001\002\000\016\042\230\043\233\044\227\045\235\046" +
    "\231\047\232\001\002\000\006\005\ufff0\006\ufff0\001\002" +
    "\000\006\002\uffff\004\uffff\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\004\002\000\001\002\000\010\005\ufff4" +
    "\006\ufff4\037\252\001\002\000\006\005\246\006\245\001" +
    "\002\000\004\041\247\001\002\000\042\002\ufffb\004\ufffb" +
    "\010\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\017" +
    "\ufffb\021\ufffb\022\ufffb\024\ufffb\032\ufffb\035\ufffb\040\ufffb" +
    "\041\ufffb\001\002\000\010\005\ufff3\006\ufff3\037\250\001" +
    "\002\000\026\032\100\041\105\042\104\043\074\044\076" +
    "\045\106\046\077\047\102\051\073\066\107\001\002\000" +
    "\042\005\ufff1\006\ufff1\050\115\051\111\052\122\053\121" +
    "\054\113\055\124\056\116\057\123\060\125\061\117\062" +
    "\120\063\114\064\112\065\126\001\002\000\026\032\100" +
    "\041\105\042\104\043\074\044\076\045\106\046\077\047" +
    "\102\051\073\066\107\001\002\000\042\005\ufff2\006\ufff2" +
    "\050\115\051\111\052\122\053\121\054\113\055\124\056" +
    "\116\057\123\060\125\061\117\062\120\063\114\064\112" +
    "\065\126\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\014\002\005\003\013\005\010\006\003\012" +
    "\007\001\001\000\004\007\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\240\005" +
    "\010\006\003\012\007\001\001\000\012\003\237\005\010" +
    "\006\003\012\007\001\001\000\002\001\001\000\004\010" +
    "\221\001\001\000\004\004\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\022\014\021\015\024\016\023\001\001\000\002" +
    "\001\001\000\004\030\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\026\001\001\000\004\030\030" +
    "\001\001\000\004\031\032\001\001\000\002\001\001\000" +
    "\004\030\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\022\016\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\042\017\041" +
    "\001\001\000\004\013\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\047\006\003\020\046\001\001" +
    "\000\002\001\001\000\026\021\057\022\065\023\054\025" +
    "\052\026\070\027\067\030\063\032\064\033\060\034\061" +
    "\001\001\000\010\005\047\006\003\020\050\001\001\000" +
    "\002\001\001\000\006\034\102\036\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\102\035\176\036\145\001\001\000\006\034\102\036\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\157\022\065\023\054\025\052\026" +
    "\070\027\067\030\063\032\064\033\060\034\061\001\001" +
    "\000\006\034\102\036\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\102\036\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\102\036\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\034\102\036\107\001\001\000\002\001\001\000\006\034" +
    "\102\036\143\001\001\000\006\034\102\036\142\001\001" +
    "\000\006\034\102\036\141\001\001\000\006\034\102\036" +
    "\140\001\001\000\006\034\102\036\137\001\001\000\006" +
    "\034\102\036\136\001\001\000\006\034\102\036\135\001" +
    "\001\000\006\034\102\036\134\001\001\000\006\034\102" +
    "\036\133\001\001\000\006\034\102\036\132\001\001\000" +
    "\006\034\102\036\131\001\001\000\006\034\102\036\130" +
    "\001\001\000\006\034\102\036\127\001\001\000\006\034" +
    "\102\036\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\102" +
    "\035\146\036\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\102" +
    "\035\152\036\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\102\035\163\036\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\172\001\001" +
    "\000\004\024\174\001\001\000\004\013\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\213\001\001\000\002" +
    "\001\001\000\004\012\217\001\001\000\012\003\216\005" +
    "\010\006\003\012\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\102\036\250" +
    "\001\001\000\002\001\001\000\006\034\102\036\252\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int declList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl declList1 = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp main = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl declList2 = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<VarDeclOp> listVarDecl=new ArrayList<VarDeclOp>();
                listVarDecl.addAll(declList1.getVarDeclList());
                listVarDecl.addAll(declList2.getVarDeclList());
                ArrayList<FunOp> listFun=new ArrayList<FunOp>();
                listFun.addAll(declList1.getFunOpList());
                listFun.addAll(declList2.getFunOpList());
                RESULT=new ProgramOp(listVarDecl,main,listFun);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              Decl RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl declList = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Decl();
                RESULT.addVarDecl(varDecl);
                ArrayList<VarDeclOp> varDeclList=declList.getVarDeclList();
                ArrayList<FunOp> funOpList=declList.getFunOpList();
                RESULT.addsVarDeclList(varDeclList);
                RESULT.addsFunOpList(funOpList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              Decl RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp funDecl = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl declList = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= new Decl();
                RESULT.addFunOp(funDecl);
                ArrayList<VarDeclOp> varDeclList=declList.getVarDeclList();
                ArrayList<FunOp> funOpList=declList.getFunOpList();
                RESULT.addsVarDeclList(varDeclList);
                RESULT.addsFunOpList(funOpList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              Decl RESULT =null;
		 RESULT= new Decl(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              FunOp RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunOp funDecl = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=funDecl;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listIdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listIdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> listId = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT=new VarDeclOp(type,listId);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOp RESULT =null;
		int idInitObbListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitObbListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> idInitObbList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=new VarDeclOp("var",idInitObbList);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              String RESULT =null;
		RESULT="integer";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              String RESULT =null;
		RESULT="boolean";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              String RESULT =null;
		RESULT="float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              String RESULT =null;
		RESULT="string";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              String RESULT =null;
		RESULT="char";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<Expr>();
                RESULT.add(new Identifier(id));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<Expr> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> idInitList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<Expr>();
                RESULT.addAll(idInitList);
                RESULT.add(new Identifier(id));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<Expr>();
                IdInitOp idInit=new IdInitOp(new Identifier(id),expr);
                RESULT.add(idInit);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<Expr> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Expr> idInitList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<Expr>();
                RESULT.addAll(idInitList);
                IdInitOp idInit=new IdInitOp(new Identifier(id),expr);
                RESULT.add(idInit);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<Expr> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp con = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT=new ArrayList<Expr>();
                     IdInitObbOp idInitObb=new IdInitObbOp(new Identifier(id),con);
                     RESULT.add(idInitObb);
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<Expr> RESULT =null;
		int idInitObbListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObbListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<Expr> idInitObbList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstOp con = (ConstOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=new ArrayList<Expr>();
                    RESULT.addAll(idInitObbList);
                    IdInitObbOp idInitObb=new IdInitObbOp(new Identifier(id),con);
                    RESULT.add(idInitObb);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("integer_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("real_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean_const","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean_const","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("string_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              ConstOp RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("char_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ParDeclOp> paramList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (paramList==null)
                    RESULT=new FunOp(new Identifier(id),type,body);
                else
                    RESULT=new FunOp(new Identifier(id),paramList,type,body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT=new BodyOp(varDeclList,statList);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= 
            {
              ArrayList<ParDeclOp> RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDeclOp> listParams = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=listParams;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT=new ArrayList<ParDeclOp> ();
                         RESULT.add(parDecl);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int listParamsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listParamsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOp> listParams = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT=new ArrayList<ParDeclOp>();
                         RESULT.addAll(listParams);
                         RESULT.add(parDecl);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=new ParDeclOp("in",type,idList);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=new ParDeclOp("out",type,idList);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=type;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= VOID 
            {
              String RESULT =null;
		RESULT="void";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<VarDeclOp>();
                RESULT.add(varDecl);
                if(varDeclList!=null)
                    RESULT.addAll(varDeclList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= 
            {
              ArrayList<Statement> RESULT =null;
		
                RESULT=new ArrayList<Statement>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat StatList 
            {
              ArrayList<Statement> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement stat = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Statement> statList = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<Statement>();
                RESULT.addAll(statList);
                if(stat!=null)
                    RESULT.add(stat);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              Statement RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=ifStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              Statement RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForOp forStat = (ForOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=forStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat SEMI 
            {
              Statement RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadOp readStat = (ReadOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=readStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOp writeStat = (WriteOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=writeStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignOp assignStat = (AssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=assignStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              Statement RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileOp whileStat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=whileStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall SEMI 
            {
              Statement RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallFunOpExpr funCall = (CallFunOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        if (funCall.getListExpr()!=null)
	        RESULT=new CallFunOpStat(funCall.getIdentifier(),funCall.getListExpr());
        else
            RESULT=new CallFunOpStat(funCall.getIdentifier());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Expr SEMI 
            {
              Statement RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new ReturnOp(expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN SEMI 
            {
              Statement RESULT =null;
		RESULT=new ReturnOp();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp elseBody = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (elseBody!=null)
                    RESULT=new IfStatOp(expr,body,elseBody);
                else
                    RESULT=new IfStatOp(expr,body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=body;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new WhileOp(expr,body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String const1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int const2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int const2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String const2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                IdInitOp idInit=new IdInitOp(new Identifier(id),new ConstOp("integer_const",const1));
                RESULT=new ForOp(idInit,new ConstOp("integer_const",const2),body);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ReadOp(idList,new ConstOp("string_const",lessema));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReadStat ::= IdList READ 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new ReadOp(idList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IdList ::= ID IdList2 
            {
              ArrayList<Identifier> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=new ArrayList<Identifier>();
            RESULT.add(new Identifier(id));
            if (idList!=null)
                RESULT.addAll(idList);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList2 ::= COMMA IdList 
            {
              ArrayList<Identifier> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=idList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList2 ::= 
            {
              ArrayList<Identifier> RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList2",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT=new WriteOp("write",exprList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT=new WriteOp("writeln",exprList);
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new AssignOp(idList,exprList);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= ID LPAR ExprList RPAR 
            {
              CallFunOpExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT=new CallFunOpExpr(new Identifier(id),exprList);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= ID LPAR RPAR 
            {
              CallFunOpExpr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	         RESULT=new CallFunOpExpr(new Identifier(id));
	     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=new ArrayList<Expr>();
                RESULT.add(expr);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	            RESULT=new ArrayList<Expr>();
	            RESULT.add(expr);
	            RESULT.addAll(exprList);
	        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean_const","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("boolean_const","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("integer_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("real_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("string_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= CHAR_CONST 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new ConstOp("char_const",lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= ID 
            {
              Expr RESULT =null;
		int lessemaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lessemaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String lessema = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identifier(lessema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOpExpr funCall = (CallFunOpExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=funCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("AddOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("DiffOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("MulOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("DivOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("AndOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("PowOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("StrCatOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("OrOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("GTOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("GEOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("LTOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("LEOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("EQOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AritAndRelOp("NEOp",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UnaryOp("UminusOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new UnaryOp("NotOp",expr1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=expr1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
